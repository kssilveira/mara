#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define r(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define re(i, n) rbe(i, 0, n)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = (b); i c ((int)(n)); i++)
 
#define ri r(i, n)
#define rj r(j, n)
#define rk r(k, n)
#define rim r(i, m)
#define rjm r(j, m)
#define rkm r(k, m)

#define p(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl
#define pv(v) ri { p(v[i]); } pl;
#define pm(m) ri { rjm { p(m[i][j]); } pl; } pl;
#define pp(x) " "#x" " << x
#define ppn(x) pn(pp(x))
#define ppp(x) p(pp(x))

#define in(x) cin >> x
 
#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()
 
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;

const int COL = 100 * 50 + 10;
 
int main() {
  ull n, m, K;
  cin >> n >> m >> K;
  vector< pair< pair<ull, ull>, int> > in[110];
  int curind = 1;
  ull val[COL];
  map <ull, int> ind;
  r(i, m) {
    ull a, b, c;
    cin >> a >> b >> c;
    in[c].push_back(make_pair(make_pair(a, b), i));
    for (ull j = a; j <= b; j++) {
      if (!ind[j]) {
        ind[j] = curind;
        val[curind] = j;
      }
    }
  }

  ull res = -1;
  ull dp[110][COL] = {{0}};
  int what[110][COL];
  pair<int, int> from[110][COL];
  int cnt[110][COL] = {{0}};
  r(i, 101) {
    r(j, s(in[i])) {
      ull a = in[i][j].first.first,
          b = in[i][j].first.second;
      for (ull k = a; k <= b; k++) {
        int index = ind[k];
        if (index && k > dp[i][index]) {
          dp[i][index] = k;
          what[i][index] = in[i][j].second;
          from[i][index] = make_pair(-1, -1);
          cnt[i][index] = 1;
        }
        if (k > K) {
          int other = ind[k - K];
          if (other) {
            for (int l = i - 1; l >= 0; l--) {
              if (dp[l][other] + k > dp[i][index] && cnt[l][other] < n) {
                dp[i][index] = dp[l][other] + k;
                what[i][index] = in[i][j].second;
                from[i][index] = make_pair(l, other);
                cnt[i][index] = cnt[l][other] + 1;
                // tava acrescentando cnt, mas acho que preciso de
                // mais uma dimensao na pd
              }
            }
          }
        }
        if (k % K == 0) {
          int other = ind[k / K];
          if (other) {
            for (int l = i - 1; l >= 0; l--) {
              if (dp[l][other] + k > dp[i][index]) {
                dp[i][index] = dp[l][other] + k;
                what[i][index] = in[i][j].second;
                from[i][index] = make_pair(l, other);
              }
            }
          }
        }

        res = max(res, dp[i][index]);
      }
    }
  }
} 

