#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <iomanip>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define r(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define re(i, n) rbe(i, 0, n)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = (b); i c ((int)(n)); i++)
 
#define ri r(i, n)
#define rj r(j, n)
#define rk r(k, n)
#define rim r(i, m)
#define rjm r(j, m)
#define rkm r(k, m)

#define p(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl
#define pv(v) ri { p(v[i]); } pl;
#define pm(m) ri { rjm { p(m[i][j]); } pl; } pl;
#define pp(x) " "#x" " << x
#define ppn(x) pn(pp(x))
 
#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()

#define pb push_back
#define mp make_pair
#define nl cout << endl
 
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;

/*
int res;

int solve(int begin, int end, int m, bool last) {
  for (int i = begin + 1; i < end; i++) {
    int next = end + 1 - begin;
    solve(begin, i, m - next, false);
    solve(i, end, m - next - left, last);
  }
}//*/
 
set<int> dp[33][33];

int values[33][2] = {
  {2,2},{5,5},{8,9},{12,14},{16,20},{20,27},{24,35},{29,44},{34,54},{39,65},{44,77},{49,90},{54,104},{59,119},{64,135},{70,152},{76,170},{82,189},{88,209},{94,230},{100,252},{106,275},{112,299},{118,324},{124,350},{130,377},{136,405},{142,434},{148,464},{154,495}};


int main() {
  int T;
  cin >> T;
  //while (T--) {
    //int n, m;
    //cin >> n >> m;
  for (int n = 1; n < 31; n++) {
    int m = 1000000;

    //ppn(n);
    //ppn(m);

    for (int i = 0; i <= n + 1; i++) {
      for (int j = 0; j <= n + 1; j++) {
        dp[i][j].clear();
      }
    }

    for (int begin = 0; begin <= n; begin++) {
      dp[begin][begin + 1].insert(0);
    }

    for (int size = 2; size <= n + 1; size++) {
      for (int begin = 0; begin + size <= n + 1; begin++) {
        int end = begin + size;
        //ppn(begin); ppn(end);
        for (int i = begin + 1; i < end; i++) {
          int delta = end - begin;
          //ppn(i); ppn(delta);
          for (set<int>::const_iterator it = dp[begin][i].begin();
              it != dp[begin][i].end(); ++it) {
            int j = *it;
            //ppn(j);
            if (delta + j > m) break;
            for (set<int>::const_iterator jt = dp[i][end].begin();
                jt != dp[i][end].end(); ++jt) {
              int k = *jt;
              if (delta + j + k > m) break;
              dp[begin][end].insert(delta + j + k);
            }
          }
        }
      }
    }

    /*
    for (int size = 1; size <= n + 1; size++) {
      printf("size: %d\n", size);
      for (int begin = 0; begin + size <= n + 1; begin++) {
        int end = begin + size;
        for (int j = 0; j <= m; j++) {
          printf("%d", dp[begin][end][j] ? 1 : 0);
        }
        nl;
      }
      nl;
    }//*/

    //ppn(n);
    //ppn(m);
    /*
    for (set<int>::const_iterator it = dp[0][n + 1].begin();
        it != dp[0][n + 1].end(); ++it) {
      cout << *it << ' ';
    }//*/
    cout << "{";
    cout << *dp[0][n + 1].begin() << "," << *dp[0][n + 1].rbegin();
    cout << "},";

    int res = -1;
    for (int i = m; i >= 0; i--) {
      if (dp[0][n + 1].find(i) != dp[0][n + 1].end()) {
        res = m - i;
        break;
      }
    }
    //cout << res << endl;
  }
} 

