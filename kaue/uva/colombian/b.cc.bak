#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define r(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define re(i, n) rbe(i, 0, n)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = (b); i c ((int)(n)); i++)
 
#define ri r(i, n)
#define rj r(j, n)
#define rk r(k, n)
#define rim r(i, m)
#define rjm r(j, m)
#define rkm r(k, m)

#define p(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl
#define pv(v) ri { p(v[i]); } pl;
#define pm(m) ri { rjm { p(m[i][j]); } pl; } pl;
#define pp(x) " "#x" " << x
#define ppn(x) pn(pp(x))
#define ppp(x) p(pp(x))

#define in(x) cin >> x
 
#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()
 
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;

ull dp[51][51];

ull comb(int i, int j) {
  if (i < 0 || i < j) return 0;
  return dp[i][j];
}
 
int main() {
  dp[0][0] = 1;
  r(i, 51) {
    dp[i][0] = 1;
    rb(j, 1, i) {
      dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
    }
    dp[i][i] = 1;
  }

  /*
  r(i, 5) {
    r(j, i + 1) {
      cout << dp[i][j] << ' ';
    }
    cout << endl;
  }
  cout << endl;//*/

  int m, k;
  while (cin >> m >> k && m > 0) {
    //ppn(m);
    //ppn(k);
    ull res[51] = {0};
    res[0] = 1;
    r(i, k) {
      int ni;
      cin >> ni;
      for (int i = m; i >= 0; i--) {
        for (int j = 1; j <= ni && j <= m; j++) {
          res[i] += res[i - j] * comb(i, j);
        }
      }
      /*
      r(j, m) {
        cout << res[j] << ' ';
      }
      cout << endl;//*/
    }
    cout << res[m] << endl;
  }
} 

