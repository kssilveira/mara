#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define r(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define re(i, n) rbe(i, 0, n)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = (b); i c ((int)(n)); i++)
 
#define ri r(i, n)
#define rj r(j, n)
#define rk r(k, n)
#define rim r(i, m)
#define rjm r(j, m)
#define rkm r(k, m)

#define p(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl
#define pv(v) ri { p(v[i]); } pl;
#define pm(m) ri { rjm { p(m[i][j]); } pl; } pl;
#define pp(x) " "#x" " << x
#define ppn(x) pn(pp(x))
#define ppp(x) p(pp(x))

#define in(x) cin >> x
 
#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()
 
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;
 
int main() {
  int b, s;
  while (cin >> b >> s && b > 0) {
    set<pair<int, int> > st;
    st.insert(make_pair(1, b));
    //ppn(b);
    r(i, s) {
      int l, r;
      cin >> l >> r;
      //printf("(l, r) = (%d, %d)\n", l, r);
      set<pair<int, int> >::iterator it = std::lower_bound(
          st.begin(), st.end(), make_pair(l, l));
      if (it == st.end() || it->first > l) {
        --it;
      }
      //printf("it: (%d, %d)\n", it->first, it->second);
      vector<pair<int, int> > add;
      int begin = 0, end = 0;
      if (!st.empty()) {
        begin = st.begin()->first;
        end = st.rbegin()->second;
      }
      if (it -> first < l) {
        begin = l - 1;
        add.push_back(make_pair(it->first, l - 1));
      }
      if (it->second > r) {
        end = r + 1;
        add.push_back(make_pair(r + 1, it->second));
      }
      st.erase(it);
      r(i, s(add)) {
        //printf("add: (%d, %d)\n", add[i].first, add[i].second);
        st.insert(add[i]);
      }

      if (begin == l) begin = 0;
      if (end == r) end = 0;
      
      //ppn(begin); ppn(end);
      if (begin != 0) {
        cout << begin;
      } else {
        cout << '*';
      }
      cout << ' ';
      if (end != 0) {
        cout << end;
      } else {
        cout << '*';
      }
      cout << endl;
      //if (st.empty()) {
        //cout << "* *" << endl;
      //}
    }
    cout << "-" << endl;
  }
} 

