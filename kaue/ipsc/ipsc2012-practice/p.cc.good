#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <iomanip>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define r(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define re(i, n) rbe(i, 0, n)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = (b); i c ((int)(n)); i++)
 
#define ri r(i, n)
#define rj r(j, n)
#define rk r(k, n)
#define rim r(i, m)
#define rjm r(j, m)
#define rkm r(k, m)

#define p(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl
#define pv(v) ri { p(v[i]); } pl;
#define pm(m) ri { rjm { p(m[i][j]); } pl; } pl;
#define pp(x) " "#x" " << x
#define ppn(x) pn(pp(x))
 
#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()

#define pb push_back
#define mp make_pair
#define nl cout << endl
 
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;

vi rleft, rright;
 
int main() {
  int T;
  cin >> T;
  while (T--) {
    //printf("T: %d\n", T);
    rleft.clear(); rright.clear();
    int n;
    cin >> n;
    int v[30];
    ull sum = 0;
    ri {
      cin >> v[i];
      sum += v[i];
    }
    ull target = sum / 2;
    bool done = false;
    for (int out = 0; out < n && !done; out++) {
      for (int mask = 0; mask < (1 << n) && !done; mask++) {
        ull left = 0, right = 0;
        ri {
          if (i == out) { continue; }
          if (mask & (1 << i)) {
            left += v[i];
          } else {
            right += v[i];
          }
        }
        if (left <= target && right <= target) {
          done = true;
          ri {
            if (i == out) { continue; }
            if (mask & (1 << i)) {
              rleft.push_back(i);
            } else {
              rright.push_back(i);
            }
          }
          cout << rleft.size();
          for (int i = 0; i < s(rleft); i++) {
            cout << ' ';
            cout << rleft[i] + 1;
          }
          cout << endl;
          cout << rright.size();
          for (int i = 0; i < s(rright); i++) {
            cout << ' ';
            cout << rright[i] + 1;
          }
          cout << endl;
        }
      }
    }
  }
} 

